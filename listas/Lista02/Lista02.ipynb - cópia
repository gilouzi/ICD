{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "eaf0c7f6324b9d7a98af39784e325a59",
     "grade": false,
     "grade_id": "cellc-a00",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "# Lista 02 - Probabilidade + Estatística"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "33ab7cb5c99e9e9ec290a223f69051e9",
     "grade": false,
     "grade_id": "cell-d52aeab7f55b79f3",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "from numpy.testing import *\n",
    "from scipy import stats as ss\n",
    "\n",
    "plt.style.use('seaborn-colorblind')\n",
    "plt.ion()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "fa204a34b383dedd4e2cca5c2ab531fc",
     "grade": false,
     "grade_id": "cell-b6fd0cae1e2c20ba",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "# Exercício 01:\n",
    "\n",
    "\n",
    "Suponha que a altura de mulheres adultas de algumas regiões seguem uma distribuição normal com $\\mu = 162$ centímetros e $\\sigma = 8$. Nesse caso, responda às perguntas abaixo:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "41d492c263910d26f137958cfb6ddbd9",
     "grade": false,
     "grade_id": "cell-23841d1381e158d6",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "ID:\n",
    "\n",
    "(a) Dado que uma mulher mede 180\n",
    "\n",
    "centímetros, qual a probabilidade de alguém escolhido ao acaso ser maior que ela? Para responder à questão, crie uma função a(), sem parâmetros, que retorna a resposta da questão com uma precisão de 4 casas decimais.\n",
    "\n",
    "__Dica__:\n",
    "1. a função round(var, n) retorna o valor da variável var com uma precisão de n casas decimais.\n",
    "1. a classe `from scipy.stats.distributions import norm` implementa uma normal e já tem um método cdf e um método ppf (inverso da cdf)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "f4e11de49d009fd4232b792a2892666f",
     "grade": false,
     "grade_id": "cell-98e7ddcad81d69f5",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0122"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Crie aqui a função a() - com esse nome e sem parâmetros - \n",
    "# para retornar a resposta com precisão de 4 casas decimais!\n",
    "\n",
    "from scipy.stats.distributions import norm\n",
    "\n",
    "def a():\n",
    "    return round(1 - norm.cdf(180, 162, 8), 4)\n",
    "a()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "f7c54776988c6db3e25e93d834b08c58",
     "grade": true,
     "grade_id": "cell-fbf34fa20fb08d7f",
     "locked": true,
     "points": 1,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "a7e9b868299fd5928c925fc1724cfab8",
     "grade": false,
     "grade_id": "cell-15510104bc591c06",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "(b) Uma treinadora dessa região quer montar uma equipe de basquete. Para isso, ela quer delimitar uma altura mínima $h$ que as jogadoras devem ter. Ele quer que $h$ seja maior que pelo menos $90\\%$ das alturas de mulheres daquela região. Qual o valor de $h$? Para responder à questão, crie uma função _b()_, sem parâmetros, que retorna a resposta da questão com uma precisão de 4 casas decimais.  \n",
    "\n",
    "__Dica:__  \n",
    "a função _round(var, n)_ ou _np.round(var, n)_ retorna o valor da variável var com uma precisão de n casas decimais."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "ae35ce6357b273cd6fee822e7a4e632a",
     "grade": false,
     "grade_id": "cell-c3b2cf2cca494217",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "172.2524"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Crie aqui a função b() - com esse nome e sem parâmetros - \n",
    "# para retornar a resposta com precisão de 4 casas decimais!\n",
    "\n",
    "def b():\n",
    "    return round(norm.ppf(0.9, 162, 8), 4)\n",
    "b()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "87e198e2b2d7353c619a7b119e507f82",
     "grade": true,
     "grade_id": "cell-f20b2d7bee29c16d",
     "locked": true,
     "points": 1,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "3fa91db5eac83e6a97f7736590e27377",
     "grade": false,
     "grade_id": "cell-59a6d09a8ca24318",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "# Exercício 02:\n",
    "\n",
    "\n",
    "As seguintes amostras foram geradas seguindo uma distribuição normal N($\\mu$, $\\sigma$), onde $\\mu$, $\\sigma$ não necessariamente são os mesmos para ambas. Nos histogramas gerados é possível visualizar essa distribuição."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "38461183fae6f90a4f3b1d3f97ff9272",
     "grade": false,
     "grade_id": "cell-a553f82f599eb6f9",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dados1 = [3.8739066,4.4360658,3.0235970,6.1573843,3.7793704,3.6493491,7.2910457,3.7489513,5.9306145,5.3897872,\n",
    "          5.9091607,5.2491517,7.1163771,4.1930465,-0.1994626,3.2583011,5.9229948,1.8548338,4.8335581,5.2329008,\n",
    "          1.5683191,5.8756518,3.4215138,4.7900996,5.9530234,4.4550699,3.3868535,5.3060581,4.2124300,7.0123823,\n",
    "          4.9790184,2.2368825,3.9182012,5.4449732,5.7594690,5.4159924,3.5914275,3.4382886,4.0706780,6.9489863,\n",
    "          6.3269462,2.8740986,7.4210664,4.6413206,4.2209699,4.2009752,6.2509627,4.9137823,4.9171593,6.3367493]\n",
    "\n",
    "dados2 = [2.291049832,5.092164483,3.287501109,4.152289011,4.534256822,5.513028947,2.696660244,3.270482741,\n",
    "          5.435338467,6.244110011,1.363583509,5.385855994,6.069527998,2.148361858,6.471584096,4.953202949,\n",
    "          6.827787432,4.695468536,2.047598339,8.858080081,5.436394723,7.849470791,4.053545595,3.204185038,\n",
    "          2.400954454,-0.002092845,3.571868529,6.202897955,5.224842718,4.958476608,6.708545254 -0.115002497,\n",
    "          5.106492712,3.343396551,5.984204841,3.552744920,4.041155327,5.709103288,3.137316917,2.100906915,\n",
    "          4.379147487,0.536031040,4.777440348,5.610527663,3.802506385,3.484180306,7.316861806,2.965851553,\n",
    "          3.640560731,4.765175164,7.047545215,5.683723446,5.048988000,6.891720033,3.619091771,8.396155189,\n",
    "          5.317492252,2.376071049,4.383045321,7.386186468,6.554626718,5.020433071,3.577328839,5.534419417,\n",
    "          3.600534876,2.172314745,4.632719037,4.361328042,4.292156420,1.102889101,4.621840612,4.946746104,\n",
    "          6.182937650,5.415993589,4.346608293,2.896446739,3.516568382,6.972384719,3.233811405,4.048606672,\n",
    "          1.663547342,4.607297335 -0.753490459,3.205353052,1.269307121,0.962428478,4.718627886,4.686076530,\n",
    "          2.919118501,6.204058666,4.803050149,4.670632749,2.811395731,7.214950058,3.275492976,2.336357937,\n",
    "          8.494097155,6.473022507,8.525715511,4.364707111]\n",
    "\n",
    "plt.hist(dados1)\n",
    "plt.show()\n",
    "plt.hist(dados2)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "e7a65c53751413a3706995f755ef8ea3",
     "grade": false,
     "grade_id": "cell-bd6ee8e5354ecfe2",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "__a)__ A partir dos histogramas, tente aproximar uma normal a cada um deles, desenhando-a sobre o histograma. Para isso, você deve estimar valores de $\\mu$ e $\\sigma$. Não se esqueça de normalizar os dados, ou seja, o eixo y deve estar um uma escala de 0 a (no máximo) 1!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "a2a9350e259f177d671ace9f62bda20e",
     "grade": false,
     "grade_id": "cell-58abe466e157835a",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def normal(mu,sigma,x):\n",
    "    return 1/(sigma * np.sqrt(2 * np.pi)) * np.exp(-(x - mu)**2 / (2 * sigma**2))\n",
    "\n",
    "mu = np.mean(dados1)\n",
    "sigma = np.std(dados1)\n",
    "x = np.sort(np.random.normal(mu, sigma, 200))\n",
    "\n",
    "plt.plot(x, normal(mu, sigma, x), linewidth=2, color='r')\n",
    "plt.hist(dados1, density = True)\n",
    "plt.xlim(0,8)\n",
    "plt.show()\n",
    "\n",
    "mu = np.mean(dados2)\n",
    "sigma = np.std(dados2)\n",
    "x = np.sort(np.random.normal(mu, sigma, 200))\n",
    "\n",
    "plt.plot(x, normal(mu, sigma, x), linewidth=2, color='r')\n",
    "plt.hist(dados2, density = True)\n",
    "plt.xlim(0,8)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "df5b257253382e8cd5b058ab39d18b0a",
     "grade": false,
     "grade_id": "cell-7e634a02cc0a6274",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "# Exercício 03:\n",
    "\n",
    "\n",
    "Dado uma tabela com informações sobre uma amostra com 20 alunos contendo a nota desses alunos em algumas disciplinas e os níveis de dificuldade das mesmas, crie uma função que retorne a probabilidade condicional estimada à partir dos dados para dois eventos dados, informando ainda se os eventos são independentes ou não. Ou seja, dado a tabela mostrada no exemplo (lista de listas) e dois eventos A e B, retorne a probabilidade condicional de A dado B (P(A|B)) com uma precisão de 4 casas decimais. O retorno da função, entretanto, deve ser uma frase (string) escrita da seguinte forma: _str: val_ onde _str_ é a string \"Independentes\" se os eventos A e B são independentes e \"Dependentes\" caso contrário e _val_ é o valor da probabilidade condicional P(A|B) com uma precisão de 4 casas decimais.\n",
    "\n",
    "\n",
    "__Dica:__  \n",
    "a função format(var, '.nf') retorna uma string com o valor da variável var com uma precisão de exatamente n casas decimais."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "1e92c0f1112a4ed053526398137a0788",
     "grade": false,
     "grade_id": "cell-90ca1307d00c3011",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   dificuldade nota\n",
      "id                 \n",
      "1        Facil    C\n",
      "2        Facil    A\n",
      "3      Dificil    E\n",
      "4      Dificil    B\n",
      "5      Dificil    B\n",
      "6      Dificil    A\n",
      "7        Facil    D\n",
      "8      Dificil    C\n",
      "9        Facil    D\n",
      "10       Facil    C\n",
      "11       Facil    A\n",
      "12       Facil    A\n",
      "13     Dificil    B\n",
      "14     Dificil    C\n",
      "15     Dificil    E\n",
      "16     Dificil    C\n",
      "17       Facil    A\n",
      "18     Dificil    D\n",
      "19       Facil    B\n",
      "20       Facil    A\n"
     ]
    }
   ],
   "source": [
    "# Esses dados se referem às notas (A-E) de 20 alunos de acordo com a dificuldade da disciplina (Fácil ou Difícil) \n",
    "# Coluna 1: id do aluno\n",
    "# Coluna 2: dificuldade da disciplina ('Facil' ou 'Dificil')\n",
    "# Coluna 3: nota do aluno (A-E)\n",
    "data = [[1, 'Facil', 'C'],\n",
    "        [2, 'Facil', 'A'],\n",
    "        [3, 'Dificil', 'E'],\n",
    "        [4, 'Dificil', 'B'],\n",
    "        [5, 'Dificil', 'B'],\n",
    "        [6, 'Dificil', 'A'],\n",
    "        [7, 'Facil', 'D'],\n",
    "        [8, 'Dificil', 'C'],\n",
    "        [9, 'Facil', 'D'],\n",
    "        [10, 'Facil', 'C'],\n",
    "        [11, 'Facil', 'A'],\n",
    "        [12, 'Facil', 'A'],\n",
    "        [13, 'Dificil', 'B'],\n",
    "        [14, 'Dificil', 'C'],\n",
    "        [15, 'Dificil', 'E'],\n",
    "        [16, 'Dificil', 'C'],\n",
    "        [17, 'Facil', 'A'],\n",
    "        [18, 'Dificil', 'D'],\n",
    "        [19, 'Facil', 'B'],\n",
    "        [20, 'Facil', 'A']]\n",
    "data = pd.DataFrame(data, columns=['id', 'dificuldade', 'nota'])\n",
    "data = data.set_index('id')\n",
    "print(data)\n",
    "\n",
    "def prob_cond(df,\n",
    "              valor_nota: 'considere como A no bayes',\n",
    "              valor_dificuldade: 'considere como B no bayes'):\n",
    "    \n",
    "    #P(A|B) -> considerando que B ocorreu, quais a chances de acontecer A\n",
    "    #ocorrencia de A independente de B\n",
    "    prob_A = (df[df['nota'] == valor_nota].shape[0])/df.shape[0]\n",
    "    \n",
    "    #criando o dataframe com apenas a condicao B\n",
    "    df_b = df.loc[df['dificuldade'] == valor_dificuldade]\n",
    "    \n",
    "    #quantidade de ocorrencias em A quando B ocorre\n",
    "    A = df_b[df_b['nota'] == valor_nota].shape[0]\n",
    "    \n",
    "    #ocorrencias de B\n",
    "    B = df_b.shape[0]\n",
    "    \n",
    "    if(prob_A == A):\n",
    "        return ('Independentes: {:4.4f}'.format(prob_A))\n",
    "    else:\n",
    "        return ('Dependentes: {:4.4f}'.format(A/B))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "437b11af3dfa1362e73fa07bb0539f0e",
     "grade": true,
     "grade_id": "cell-7fda9ffd35d685a6",
     "locked": true,
     "points": 1,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "\"\"\"Check that prob_cond returns the correct output for several inputs\"\"\"\n",
    "\n",
    "assert_equal(prob_cond(data, 'A', 'Facil'), 'Dependentes: 0.5000')\n",
    "assert_equal(prob_cond(data, 'E', 'Facil'), 'Dependentes: 0.0000')\n",
    "assert_equal(prob_cond(data, 'A', 'Dificil'), 'Dependentes: 0.1000')\n",
    "assert_equal(prob_cond(data, 'E', 'Dificil'), 'Dependentes: 0.2000')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "1117e2f85c9b33dff873707840491059",
     "grade": true,
     "grade_id": "cell-f0c1dad559960dad",
     "locked": true,
     "points": 1,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "a9e9eac9af8310642b64964c6e3315d4",
     "grade": false,
     "grade_id": "cell1c-a00",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "# Exercício 04:\n",
    "\n",
    "\n",
    "Utilizando os dados de acidentes fatais em companhias aéreas dos Estados Unidos de 1985 a 1999, calcule algumas estatísticas básicas. Você deve retornar uma __lista__ com os valores das estatísticas calculadas, sendo elas, nessa ordem: menor valor, maior valor, média, mediana, variância e desvio-padrão. Para responder à questão, crie uma função _estat(acidentes)_ que retorna a lista com os valores correspondentes às resposta da questão, inteiros quando forem inteiros ou com uma precisão de 4 casas decimais caso contrário.\n",
    "\n",
    "__Teste:__\n",
    "`assert_equal(estat(acidentes), ans)`, sendo que `ans` é uma lista contendo os valores corretos para as estatísticas que este exercício pede.\n",
    "\n",
    "__Dicas:__  \n",
    "1) A função round(var, n) retorna o valor da variável var com uma precisão de n casas decimais.\n",
    "\n",
    "2) Execute o teste `assert_equal(estat(lista_boba), ans_bobo)` para alguma `lista_boba` que você saiba calcular as estatísticas no papel.\n",
    "\n",
    "\n",
    "__Fonte:__ https://aviation-safety.net/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "880db9dff7038586993103b01f6edda6",
     "grade": false,
     "grade_id": "cell1-a00",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0, 14, '2.1786', 1.0, '8.0395', '2.8354']"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Crie aqui a função estat(acidentes) - com esse nome e parâmetro - \n",
    "# a função deve retornar a lista com as respostas com precisão de 4 casas decimais!\n",
    "\n",
    "def estat(acidentes):\n",
    "    menor = np.min(acidentes)\n",
    "    maior = np.max(acidentes)\n",
    "    media = format(np.mean(acidentes), '.4f')\n",
    "    mediana = np.median(acidentes)\n",
    "    variancia = format(np.var(acidentes), '.4f')\n",
    "    desvio = format(np.std(acidentes), '.4f')\n",
    "    return [menor, maior, media, mediana, variancia, desvio]\n",
    "\n",
    "acidentes = [0,14,0,1,0,4,1,0,0,2,1,5,0,3,0,0,6,1,1,12,3,1,5,0,3,0,0,1,1,0,1,5,2,1,1,3,4,0,3,0,2,2,1,0,1,1,1,3,0,4,3,8,7,3,0,1]\n",
    "\n",
    "estat(acidentes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "752c9d5b0e9fbba86ba76e2731cebd7b",
     "grade": true,
     "grade_id": "cell1t-a00",
     "locked": true,
     "points": 1,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "3f30c30d62caa22538ab5156a3188c15",
     "grade": false,
     "grade_id": "cell2c-a00",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "# Exercício 05:\n",
    "\n",
    "\n",
    "Procure encontrar correlações espúrias interessantes e apresente um exemplo encontrado. Ou seja, aprensente dois conjuntos de dados que possuem alta correlação (muito positivas ou muito negativas) sem que um seja de fato o causador do outro. Além disso, deixe resgistrado os gráficos com a distribuição dos dados e um gráfico de dispersão como forma de visualizar a correlação entre os dados. Calcule a covariância e correlação entre os dados e, por fim, se possível, tente explicar qual poderia ser a verdadeira causa da ocorrência das observações. Para isso, utilize a última célula desse notebook.\n",
    "\n",
    "\n",
    "__Observação:__  \n",
    "Para ideias de correlações espúrias, veja os seguintes sites:  \n",
    "http://tylervigen.com/spurious-correlations  \n",
    "https://en.wikipedia.org/wiki/Spurious_relationship#Other_relationships  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "4f74225398e8bdbfa829d72a445b0395",
     "grade": true,
     "grade_id": "cell21-a00",
     "locked": false,
     "points": 1,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "years = range(1999,2010)\n",
    "murders = [7, 7, 7, 3, 4, 3, 8, 4, 2, 3, 2]\n",
    "age = [24, 24, 24, 21, 22, 21, 24, 22, 20, 19, 22]\n",
    "\n",
    "plt.title('Assassinatos por vapor, vapores quentes e objetos quentes')\n",
    "plt.xlabel('Anos')\n",
    "plt.ylabel('Assassinatos')\n",
    "plt.scatter(years, murders, c='b')\n",
    "plt.show()\n",
    "\n",
    "plt.title('Idade da Miss America')\n",
    "plt.xlabel('Anos')\n",
    "plt.ylabel('Idade')\n",
    "plt.scatter(years, age, c='r')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1.         0.87012701]\n",
      " [0.87012701 1.        ]]\n"
     ]
    }
   ],
   "source": [
    "#Matriz de correlação entre as variáveis\n",
    "print(np.corrcoef(murders, age))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[5.07272727 3.44545455]\n",
      " [3.44545455 3.09090909]]\n"
     ]
    }
   ],
   "source": [
    "#Matriz de covariância entre as variáveis\n",
    "X = np.stack((murders, age), axis=0)\n",
    "print(np.cov(X))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Não é possível encontrar qualquer relação real para os dados a não ser mera coincidência."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
